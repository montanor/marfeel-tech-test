AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template contains the blueprint for deploying the infrastructure resources requested in the marfeel sysadmin Bogota position test, contains an instance with HAproxy as load balancer for an Autoscaling group in charge of an app-server hosting a Python application. David MontaÃ±o - daalmore@gmail.com

Parameters:
  AdminIP:
    Description: Enter the IP from which you will access by SSH
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0

  AccessKeyId:
    NoEcho: 'true'
    Default: ''
    Description: (Optional) If you want to automatically login the AWSCLI from the HAProxy instance enter your Access Key
    Type: String

  SecretAccessKey:
    NoEcho: 'true'
    Default: ''
    Description: (Optional) If you want to automatically login the AWSCLI from the HAProxy instance enter your Secret Access Key
    Type: String


Resources:
  HAproxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: haproxy-sec-group
      GroupDescription: Security group for the HAproxy intance
      VpcId: vpc-b33ad5ca
      SecurityGroupIngress:
        - IpProtocol: tcp # Allow public access
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp # Remote administration
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AdminIP

  HAproxyInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: HAproxy-ec2
      ImageId: ami-6d48500b
      InstanceType: t2.nano
      SecurityGroupIds:
        - !Ref HAproxySecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -ex
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
              # This script will configure haproxy and prepare the instance to use the auto-add-instances script
              # Install HAproxy
              apt-get update 
              apt-get install -y haproxy unzip python3 awscli
              # Autoconfigure AWSCLI
              /usr/bin/aws configure set aws_access_key_id ${AccessKeyId}
              /usr/bin/aws configure set aws_secret_access_key ${SecretAccessKey}
              /usr/bin/aws configure set region eu-west-1
              # Download the autoscaling group register script and template
              cd /etc/haproxy/
              wget -O auto-add-instances.sh https://raw.githubusercontent.com/montanor/marfeel-tech-test/master/haproxy/auto-add-instances.sh
              wget -O haproxy.cfg.template https://raw.githubusercontent.com/montanor/marfeel-tech-test/master/haproxy/haproxy.cfg
              chmod +x auto-add-instances.sh
              echo "*/3 * * * * /etc/haproxy/auto-add-instances.sh > /etc/haproxy/auto-add-log" | tee -a /var/spool/cron/crontabs/root
              # Start the services
              systemctl enable haproxy
              systemctl start haproxy
            - {
              AccessKeyId: !Ref 'AccessKeyId',
              SecretAccessKey: !Ref 'SecretAccessKey'
              }

  AppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AppServer-sec-group
      GroupDescription: Security group for the app server intance
      VpcId: vpc-b33ad5ca
      SecurityGroupIngress: # Remote administration
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AdminIP
        - IpProtocol: tcp # Allow access from HAProxy instance
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref HAproxySecurityGroup

  AppServerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: AppServer-launch-config
      AssociatePublicIpAddress: true
      ImageId: ami-0821d6c83854dbafa
      InstanceType: t2.nano
      KeyName: AppServer-ec2
      SecurityGroups:
        - !Ref AppServerSecurityGroup
      UserData: # This asumes that the AMI already has nginx and python installed
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          # Create Nginx Cache folder
          mkdir -p /tmp/nginx/cache
          # Autostart services
          systemctl enable nginx
          systemctl enable webapp
          # Clone the Python app source code
          cd /opt
          git clone https://bitbucket.org/Marfeel/appserverpythontestapp.git
          mv appserverpythontestapp/ test/
          # Start the services
          systemctl start nginx
          systemctl start webapp


  AppServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - eu-west-1c
      LaunchConfigurationName: !Ref AppServerLaunchConfiguration
      MaxSize: 1
      MinSize: 1
